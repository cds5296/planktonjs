addScript('Creature', 'Creature.js');
addCss('Creature', 'creature.css');

CreatureComponent = function (thereality) {
    this.reality = thereality;
    this.listenerId = 'CreatureComponent'
    this.canvas_genome = null;
    this.view = null;
    this.creatures = []

    this.initializeComponent = function () {
    }

    this.fillComponent = function () {
        // Move
        this.addParameter('coef_angle', 10, 'Creature', '???', 0, 50, 0);
        this.addParameter('coef_move', 0.6, 'Creature', '???', 0, 5, 1);
        this.addParameter('coef_vibr', 5, 'Creature', '???', 0, 50, 1);
        this.addParameter('move_timeout', 30, 'Creature', '???', 0, 100, 1);
        this.addParameter('ponderation', 10, 'Creature', '???', 0, 100, 0);

        // energy control
        this.addParameter('energy_coef_vibr', 100, 'Creature', '???', 0, 300, 0);
        this.addParameter('energy_base', 0.5, 'Creature', '???', 0, 10, 1);
        this.addParameter('energyRatio', 100, 'Creature', 'factor by which divide the energy cost before substracting to remaining creature energy', 0, 500, 0);
        this.addParameter('energy_timeout', 200, 'Creature', '???', 0, 1000, 1);

        // genome control
        this.addParameter('vibration_max', Math.PI/4, 'Creature', '???', 0, 2*Math.PI,0);
        this.addParameter('vibration_min', 0, 'Creature', '???', 0, 3.14,0);
        this.addParameter('vibration_threshold', 70, 'Creature', '???', 0, 100, 0);
        this.addParameter('vibration_incr', 0.001, 'Creature', '???', 0, 0.1, 0);

        this.addParameter('length_max', 15, 'Creature', '???', 0, 100, 0);
        this.addParameter('length_min', 5, 'Creature', '???', 0, 100, 0);
        this.addParameter('adjust_vibr_max', 1, 'Creature', '???', 0, 100, 0);
    }

    this.startComponent = function () {

    }

    this.drawComponent = function () {
        this.fire('CreatureComponent.draw')
    }
    this.creatures = [];
    this.clone = function (id) {
        this.new_creature(this.creatures[id].genome);
    }

    this.mutate = function (id) {
        var ribosome = new CreatureRibosome(document.getElementById(this.canvas_genomeid));
        this.new_creature(ribosome.mutateGenome(this.creatures[id].genome));
    }

    this.killCreature = function (id) {
        this.creatures[id].kill();
        this.creatures[id] = null;
    }

    this.new_creature = function (object) {
        var genome=object.genome
        var ribosome=object.ribosome
        var i = this.creatures.length;
        this.creatures[i] = new Creature(
            i,
            this,
            Math.round(Math.random() * (this.view.size_x - 300)) + 150,
            Math.round(Math.random() * (this.view.size_y - 300)) + 150,
            0,
            this.view.canvas.color(Math.round(Math.random() * 128), Math.round(Math.random() * 128), Math.round(Math.random() * 128))
        )

        if (!genome) {
            this.creatures[i].genome=ribosome.generateGenome(this.getParameter('length_max'), this.getParameter('length_min'));

        } else {
            this.creatures[i].genome = genome;
        }
        this.creatures[i].birth(ribosome.decodeGenome(genome));

        this.creatures[i].spawn(this.creatures[i]);
        this.fire({ type:'Creature.birth', target:this.creatures[i]});

        this.creatures[i].energy = Math.round(this.creatures[i].sections.length * this.getParameter( 'energyRatio'));
        this.creatures[i].energy_max = this.creatures[i].energy;
    }

    this.zoom_creature = function (id) {
        var new_zoom_x = (this.creatures[id].x_max - this.creatures[id].x_min) / 2 + this.creatures[id].x_min - this.reality.view.zoom_size_x / 2;
        var new_zoom_y = (this.creatures[id].y_max - this.creatures[id].y_min) / 2 + this.creatures[id].y_min - this.reality.view.zoom_size_y / 2;
        // attenuate vibration when following a creature
        var deltax = this.reality.view.zoom_x - new_zoom_x;
        if (Math.abs(deltax) > 10) {
            this.reality.view.zoom_x = this.reality.view.zoom_x - Math.round(deltax / 50) + 1;
            ;
        }
        var deltay = this.reality.view.zoom_y - new_zoom_y;
        if (Math.abs(deltay) > 10) {
            this.reality.view.zoom_y = this.reality.view.zoom_y - Math.round(deltay / 50) + 1;
        }
        this.reality.view.zoom(0);
    }

    this.addListener('CreatureRibosome.newCreature', this.listenerId, function (component) {
        return function (event) {
            // target contains the decoded genome generated by a ribosome
            component.new_creature(event[0].target)
        }
    }(this));

    this.addListener('View.start', this.listenerId, function (component) {
        return function (event) {
            component.view = event[0].target;
        }
    }(this));

    this.addListener('View.draw', this.listenerId, function (component) {
        return function () {
            component.drawComponent()
        }
    }(this));

    this.addListener('Creature.kill', this.listenerId, function (component) {
        return function (event) {
            component.removeListener('CreatureComponent.draw', event[0].target.listenerId)
            component.removeListener('CreatureComponent.kill' + component.id, event[0].target.listenerId)
            component.killCreature(event[0].target.id);
        }
    }(this)
    )




    this.addComponentListeners()

}


